// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#ifndef PROTOBUF_world_2eproto__INCLUDED
#define PROTOBUF_world_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace WORLD {
class Area;
class AreaDefaultTypeInternal;
extern AreaDefaultTypeInternal _Area_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Terrain;
class TerrainDefaultTypeInternal;
extern TerrainDefaultTypeInternal _Terrain_default_instance_;
class Tile;
class TileDefaultTypeInternal;
extern TileDefaultTypeInternal _Tile_default_instance_;
}  // namespace WORLD

namespace WORLD {

namespace protobuf_world_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_world_2eproto

// ===================================================================

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WORLD.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  inline Location* New() const PROTOBUF_FINAL { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .WORLD.Area areas = 4;
  int areas_size() const;
  void clear_areas();
  static const int kAreasFieldNumber = 4;
  const ::WORLD::Area& areas(int index) const;
  ::WORLD::Area* mutable_areas(int index);
  ::WORLD::Area* add_areas();
  ::google::protobuf::RepeatedPtrField< ::WORLD::Area >*
      mutable_areas();
  const ::google::protobuf::RepeatedPtrField< ::WORLD::Area >&
      areas() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // int32 current_area_x = 5;
  void clear_current_area_x();
  static const int kCurrentAreaXFieldNumber = 5;
  ::google::protobuf::int32 current_area_x() const;
  void set_current_area_x(::google::protobuf::int32 value);

  // int32 current_area_y = 6;
  void clear_current_area_y();
  static const int kCurrentAreaYFieldNumber = 6;
  ::google::protobuf::int32 current_area_y() const;
  void set_current_area_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WORLD.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::WORLD::Area > areas_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 current_area_x_;
  ::google::protobuf::int32 current_area_y_;
  mutable int _cached_size_;
  friend struct protobuf_world_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Area : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WORLD.Area) */ {
 public:
  Area();
  virtual ~Area();

  Area(const Area& from);

  inline Area& operator=(const Area& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Area& default_instance();

  static inline const Area* internal_default_instance() {
    return reinterpret_cast<const Area*>(
               &_Area_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Area* other);

  // implements Message ----------------------------------------------

  inline Area* New() const PROTOBUF_FINAL { return New(NULL); }

  Area* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Area& from);
  void MergeFrom(const Area& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Area* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .WORLD.Tile tile = 4;
  int tile_size() const;
  void clear_tile();
  static const int kTileFieldNumber = 4;
  const ::WORLD::Tile& tile(int index) const;
  ::WORLD::Tile* mutable_tile(int index);
  ::WORLD::Tile* add_tile();
  ::google::protobuf::RepeatedPtrField< ::WORLD::Tile >*
      mutable_tile();
  const ::google::protobuf::RepeatedPtrField< ::WORLD::Tile >&
      tile() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 xLoc = 2;
  void clear_xloc();
  static const int kXLocFieldNumber = 2;
  ::google::protobuf::int32 xloc() const;
  void set_xloc(::google::protobuf::int32 value);

  // int32 yLoc = 3;
  void clear_yloc();
  static const int kYLocFieldNumber = 3;
  ::google::protobuf::int32 yloc() const;
  void set_yloc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WORLD.Area)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::WORLD::Tile > tile_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 xloc_;
  ::google::protobuf::int32 yloc_;
  mutable int _cached_size_;
  friend struct protobuf_world_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Tile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WORLD.Tile) */ {
 public:
  Tile();
  virtual ~Tile();

  Tile(const Tile& from);

  inline Tile& operator=(const Tile& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tile& default_instance();

  static inline const Tile* internal_default_instance() {
    return reinterpret_cast<const Tile*>(
               &_Tile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Tile* other);

  // implements Message ----------------------------------------------

  inline Tile* New() const PROTOBUF_FINAL { return New(NULL); }

  Tile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Tile& from);
  void MergeFrom(const Tile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Tile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .WORLD.Terrain terrain = 1;
  bool has_terrain() const;
  void clear_terrain();
  static const int kTerrainFieldNumber = 1;
  const ::WORLD::Terrain& terrain() const;
  ::WORLD::Terrain* mutable_terrain();
  ::WORLD::Terrain* release_terrain();
  void set_allocated_terrain(::WORLD::Terrain* terrain);

  // @@protoc_insertion_point(class_scope:WORLD.Tile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::WORLD::Terrain* terrain_;
  mutable int _cached_size_;
  friend struct protobuf_world_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Terrain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WORLD.Terrain) */ {
 public:
  Terrain();
  virtual ~Terrain();

  Terrain(const Terrain& from);

  inline Terrain& operator=(const Terrain& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Terrain& default_instance();

  static inline const Terrain* internal_default_instance() {
    return reinterpret_cast<const Terrain*>(
               &_Terrain_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Terrain* other);

  // implements Message ----------------------------------------------

  inline Terrain* New() const PROTOBUF_FINAL { return New(NULL); }

  Terrain* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Terrain& from);
  void MergeFrom(const Terrain& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Terrain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 xLoc = 1;
  void clear_xloc();
  static const int kXLocFieldNumber = 1;
  ::google::protobuf::int32 xloc() const;
  void set_xloc(::google::protobuf::int32 value);

  // int32 yLoc = 2;
  void clear_yloc();
  static const int kYLocFieldNumber = 2;
  ::google::protobuf::int32 yloc() const;
  void set_yloc(::google::protobuf::int32 value);

  // int32 ttype = 3;
  void clear_ttype();
  static const int kTtypeFieldNumber = 3;
  ::google::protobuf::int32 ttype() const;
  void set_ttype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WORLD.Terrain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 xloc_;
  ::google::protobuf::int32 yloc_;
  ::google::protobuf::int32 ttype_;
  mutable int _cached_size_;
  friend struct protobuf_world_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// string name = 1;
inline void Location::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::name() const {
  // @@protoc_insertion_point(field_get:WORLD.Location.name)
  return name_.GetNoArena();
}
inline void Location::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WORLD.Location.name)
}
#if LANG_CXX11
inline void Location::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WORLD.Location.name)
}
#endif
inline void Location::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WORLD.Location.name)
}
inline void Location::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WORLD.Location.name)
}
inline ::std::string* Location::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:WORLD.Location.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_name() {
  // @@protoc_insertion_point(field_release:WORLD.Location.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WORLD.Location.name)
}

// int32 width = 2;
inline void Location::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Location::width() const {
  // @@protoc_insertion_point(field_get:WORLD.Location.width)
  return width_;
}
inline void Location::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:WORLD.Location.width)
}

// int32 height = 3;
inline void Location::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Location::height() const {
  // @@protoc_insertion_point(field_get:WORLD.Location.height)
  return height_;
}
inline void Location::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:WORLD.Location.height)
}

// repeated .WORLD.Area areas = 4;
inline int Location::areas_size() const {
  return areas_.size();
}
inline void Location::clear_areas() {
  areas_.Clear();
}
inline const ::WORLD::Area& Location::areas(int index) const {
  // @@protoc_insertion_point(field_get:WORLD.Location.areas)
  return areas_.Get(index);
}
inline ::WORLD::Area* Location::mutable_areas(int index) {
  // @@protoc_insertion_point(field_mutable:WORLD.Location.areas)
  return areas_.Mutable(index);
}
inline ::WORLD::Area* Location::add_areas() {
  // @@protoc_insertion_point(field_add:WORLD.Location.areas)
  return areas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::WORLD::Area >*
Location::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_list:WORLD.Location.areas)
  return &areas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::WORLD::Area >&
Location::areas() const {
  // @@protoc_insertion_point(field_list:WORLD.Location.areas)
  return areas_;
}

// int32 current_area_x = 5;
inline void Location::clear_current_area_x() {
  current_area_x_ = 0;
}
inline ::google::protobuf::int32 Location::current_area_x() const {
  // @@protoc_insertion_point(field_get:WORLD.Location.current_area_x)
  return current_area_x_;
}
inline void Location::set_current_area_x(::google::protobuf::int32 value) {
  
  current_area_x_ = value;
  // @@protoc_insertion_point(field_set:WORLD.Location.current_area_x)
}

// int32 current_area_y = 6;
inline void Location::clear_current_area_y() {
  current_area_y_ = 0;
}
inline ::google::protobuf::int32 Location::current_area_y() const {
  // @@protoc_insertion_point(field_get:WORLD.Location.current_area_y)
  return current_area_y_;
}
inline void Location::set_current_area_y(::google::protobuf::int32 value) {
  
  current_area_y_ = value;
  // @@protoc_insertion_point(field_set:WORLD.Location.current_area_y)
}

// -------------------------------------------------------------------

// Area

// string name = 1;
inline void Area::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Area::name() const {
  // @@protoc_insertion_point(field_get:WORLD.Area.name)
  return name_.GetNoArena();
}
inline void Area::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WORLD.Area.name)
}
#if LANG_CXX11
inline void Area::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WORLD.Area.name)
}
#endif
inline void Area::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WORLD.Area.name)
}
inline void Area::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WORLD.Area.name)
}
inline ::std::string* Area::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:WORLD.Area.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Area::release_name() {
  // @@protoc_insertion_point(field_release:WORLD.Area.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Area::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WORLD.Area.name)
}

// int32 xLoc = 2;
inline void Area::clear_xloc() {
  xloc_ = 0;
}
inline ::google::protobuf::int32 Area::xloc() const {
  // @@protoc_insertion_point(field_get:WORLD.Area.xLoc)
  return xloc_;
}
inline void Area::set_xloc(::google::protobuf::int32 value) {
  
  xloc_ = value;
  // @@protoc_insertion_point(field_set:WORLD.Area.xLoc)
}

// int32 yLoc = 3;
inline void Area::clear_yloc() {
  yloc_ = 0;
}
inline ::google::protobuf::int32 Area::yloc() const {
  // @@protoc_insertion_point(field_get:WORLD.Area.yLoc)
  return yloc_;
}
inline void Area::set_yloc(::google::protobuf::int32 value) {
  
  yloc_ = value;
  // @@protoc_insertion_point(field_set:WORLD.Area.yLoc)
}

// repeated .WORLD.Tile tile = 4;
inline int Area::tile_size() const {
  return tile_.size();
}
inline void Area::clear_tile() {
  tile_.Clear();
}
inline const ::WORLD::Tile& Area::tile(int index) const {
  // @@protoc_insertion_point(field_get:WORLD.Area.tile)
  return tile_.Get(index);
}
inline ::WORLD::Tile* Area::mutable_tile(int index) {
  // @@protoc_insertion_point(field_mutable:WORLD.Area.tile)
  return tile_.Mutable(index);
}
inline ::WORLD::Tile* Area::add_tile() {
  // @@protoc_insertion_point(field_add:WORLD.Area.tile)
  return tile_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::WORLD::Tile >*
Area::mutable_tile() {
  // @@protoc_insertion_point(field_mutable_list:WORLD.Area.tile)
  return &tile_;
}
inline const ::google::protobuf::RepeatedPtrField< ::WORLD::Tile >&
Area::tile() const {
  // @@protoc_insertion_point(field_list:WORLD.Area.tile)
  return tile_;
}

// -------------------------------------------------------------------

// Tile

// .WORLD.Terrain terrain = 1;
inline bool Tile::has_terrain() const {
  return this != internal_default_instance() && terrain_ != NULL;
}
inline void Tile::clear_terrain() {
  if (GetArenaNoVirtual() == NULL && terrain_ != NULL) delete terrain_;
  terrain_ = NULL;
}
inline const ::WORLD::Terrain& Tile::terrain() const {
  // @@protoc_insertion_point(field_get:WORLD.Tile.terrain)
  return terrain_ != NULL ? *terrain_
                         : *::WORLD::Terrain::internal_default_instance();
}
inline ::WORLD::Terrain* Tile::mutable_terrain() {
  
  if (terrain_ == NULL) {
    terrain_ = new ::WORLD::Terrain;
  }
  // @@protoc_insertion_point(field_mutable:WORLD.Tile.terrain)
  return terrain_;
}
inline ::WORLD::Terrain* Tile::release_terrain() {
  // @@protoc_insertion_point(field_release:WORLD.Tile.terrain)
  
  ::WORLD::Terrain* temp = terrain_;
  terrain_ = NULL;
  return temp;
}
inline void Tile::set_allocated_terrain(::WORLD::Terrain* terrain) {
  delete terrain_;
  terrain_ = terrain;
  if (terrain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:WORLD.Tile.terrain)
}

// -------------------------------------------------------------------

// Terrain

// int32 xLoc = 1;
inline void Terrain::clear_xloc() {
  xloc_ = 0;
}
inline ::google::protobuf::int32 Terrain::xloc() const {
  // @@protoc_insertion_point(field_get:WORLD.Terrain.xLoc)
  return xloc_;
}
inline void Terrain::set_xloc(::google::protobuf::int32 value) {
  
  xloc_ = value;
  // @@protoc_insertion_point(field_set:WORLD.Terrain.xLoc)
}

// int32 yLoc = 2;
inline void Terrain::clear_yloc() {
  yloc_ = 0;
}
inline ::google::protobuf::int32 Terrain::yloc() const {
  // @@protoc_insertion_point(field_get:WORLD.Terrain.yLoc)
  return yloc_;
}
inline void Terrain::set_yloc(::google::protobuf::int32 value) {
  
  yloc_ = value;
  // @@protoc_insertion_point(field_set:WORLD.Terrain.yLoc)
}

// int32 ttype = 3;
inline void Terrain::clear_ttype() {
  ttype_ = 0;
}
inline ::google::protobuf::int32 Terrain::ttype() const {
  // @@protoc_insertion_point(field_get:WORLD.Terrain.ttype)
  return ttype_;
}
inline void Terrain::set_ttype(::google::protobuf::int32 value) {
  
  ttype_ = value;
  // @@protoc_insertion_point(field_set:WORLD.Terrain.ttype)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace WORLD

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_world_2eproto__INCLUDED
